<script setup lang="ts">
import { ref, onBeforeUnmount } from 'vue'
import { useI18n } from 'vue-i18n'
import { storeToRefs } from 'pinia'
import { useRouter } from 'vue-router'

import type { Event } from '@/types/event'
import type { VuetifyOrder } from '@/types/list'
import { useEventListStore } from '@/store/event/list'
import { useBreadcrumb } from '@/composables/breadcrumb'
import { useMercureList } from '@/composables/mercureList'
import { useEventDeleteStore } from '@/store/event/delete'
import ActionCell from '@/components/common/ActionCell.vue'

const parallax = new URL('@/assets/stadium.jpeg', import.meta.url).href

const { t } = useI18n()
const router = useRouter()
const breadcrumb = [{ title: t('home'), to: '/' }, ...useBreadcrumb()]

const eventDeleteStore = useEventDeleteStore()
const { deleted, mercureDeleted } = storeToRefs(eventDeleteStore)

const eventListStore = useEventListStore()
const { items, totalItems, error, isLoading } = storeToRefs(eventListStore)

const page = ref('1')
const order = ref({})

const icons: { [key: string]: string } = {
	broadway: 'fa fa-mask',
	concert: 'fa fa-microphone',
	other: 'fa fa-question'
}

const sendRequest = async () => await eventListStore.getItems({ page: page.value, order: order.value })

useMercureList({ store: eventListStore, deleteStore: eventDeleteStore })

sendRequest()

const headers = [
	{ title: t('actions'), key: 'actions', sortable: false },
	{ title: t('event.src'), key: 'src', sortable: false },
	{ title: t('event.type'), key: 'type', sortable: false },
	{ title: t('event.price'), key: 'price', sortable: false },
	{ title: t('event.venue'), key: 'venue', sortable: false },
	{ title: t('event.artists'), key: 'artists', sortable: false },
	{ title: t('event.schedules'), key: 'schedules', sortable: false },
]

const updatePage = (newPage: string) => {
	page.value = newPage
	sendRequest()
}

const updateOrder = (newOrders: VuetifyOrder[]) => {
	const newOrder = newOrders[0]
	order.value = { [newOrder.key]: newOrder.order }
	sendRequest()
}

const goToShowPage = (item: Event) => router.push({ name: 'EventShow', params: { id: item['@id'] } })

onBeforeUnmount(() => eventDeleteStore.$reset())
</script>

<template>
	<v-parallax :src="parallax">
		<div class="d-flex flex-column fill-height justify-center align-center">
			<v-breadcrumbs :items="breadcrumb" />
			<div class="text-h2 font-weight-thin mb-4">BeSpectacled Events</div>
			<div class="text-h4 text-secondary">Discover our events</div>

			<v-btn
				color="primary"
				prepend-icon="fa fa-fade fa-computer-mouse"
				append-icon="fa fa-bounce fa-arrow-down"
				size="x-large"
				v-scroll-to="'.v-sheet'"
			/>
		</div>
	</v-parallax>

	<v-container fluid>
		<v-alert v-if="deleted" type="success" class="mb-4" v-text="$t('itemDeleted', [deleted['@id']])" closable />
		<v-alert v-if="mercureDeleted" type="success" class="mb-4" v-text="$t('itemDeletedByAnotherUser', [mercureDeleted['@id']])" closable />
		<v-alert v-if="error" type="error" class="mb-4" v-text="error" closable />

		<v-data-table-server
			:headers="headers"
			:items="items"
			:items-length="totalItems"
			:loading="isLoading"
			:items-per-page="items.length"
			@update:page="updatePage"
			@update:sortBy="updateOrder"
		>
			<template #item.actions="{ item }">
				<ActionCell :actions="['show']" @show="goToShowPage(item.raw)" />
			</template>

			<!-- <template #item.@id="{ item }">
				<router-link :to="{ name: 'EventShow', params: { id: item.raw['@id'] } }">
					{{ item.raw["@id"] }}
				</router-link>
			</template> -->

			<template #item.src="{ item }">
				<v-tooltip :text="item.raw.title">
					<template #activator="{ props }">
						<router-link v-bind="props" :to="{ name: 'EventShow', params: { id: item.raw['@id'] } }">
							<v-img :src="item.raw.src" max-width="100" max-height="100" />
						</router-link>
					</template>
				</v-tooltip>
			</template>

			<template #item.type="{ item }">
				<v-tooltip :text="item.raw.type">
					<template #activator="{ props }">
						<v-icon v-bind="props" :icon="icons[item.raw.type]" />
					</template>
				</v-tooltip>
			</template>

			<template #item.price="{ item }">
				${{ item.raw.price }}
			</template>

			<template #item.venue="{ item }">
				<v-tooltip :text="item.raw.venue.name">
					<template #activator="{ props }">
						<router-link v-bind="props" v-if="router.hasRoute('VenueShow')" :to="{ name: 'VenueShow', params: { id: item.raw.venue } }">
							<v-img :src="item.raw.venue.src" max-width="100" max-height="100" />
						</router-link>

						<p v-bind="props" v-else>
							<v-img :src="item.raw.venue.src" max-width="100" max-height="100" />
						</p>
					</template>
				</v-tooltip>
			</template>

			<!-- TODO v-text 3 above and 2 below -->

			<template #item.artists="{ item }">
				<v-tooltip v-for="artist in item.raw.artists" :text="artist.username">
					<template #activator="{ props }">
						<template v-if="router.hasRoute('UserShow')">
							<router-link :key="artist" :to="{ name: 'UserShow', params: { id: artist } }" v-text="artist" />
						</template>

						<template v-else>
							<v-icon v-bind="props" icon="fa fa-user" />
						</template>
					</template>
				</v-tooltip>
			</template>

			<template #item.schedules="{ item }">
				<v-tooltip v-for="day in item.raw.schedules" :text="`${day.date} (${day.times.length})`">
					<template #activator="{ props }">
						<template v-if="router.hasRoute('ScheduleShow')">
							<router-link :key="day" :to="{ name: 'ScheduleShow', params: { id: day } }" v-text="day" />
						</template>

						<template v-else>
							<v-icon v-bind="props" icon="fa fa-clock" />
						</template>
					</template>
				</v-tooltip>
			</template>
		</v-data-table-server>
	</v-container>
</template>

<style scoped>
.v-parallax {
	height: calc(100vh - (48px + 16px * 2)) !important;
	margin-bottom: 16px;
}

.v-parallax .v-btn {
	position: absolute;
	bottom: 16px;
}
</style>